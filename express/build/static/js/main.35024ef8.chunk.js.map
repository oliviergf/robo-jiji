{"version":3,"sources":["components/Register.js","components/Login.js","components/TestSession.js","App.js","serviceWorker.js","index.js"],"names":["Register","props","state","firstname","lastname","email","password","confirmation","handleChange","bind","handleRegisterInput","evt","value","target","this","setState","name","console","log","event","axios","post","then","response","catch","error","preventDefault","onSubmit","type","onChange","React","Component","Login","isLogged","self","get","withCredentials","headers","divToAppear","onClick","App","className","TestSession","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35024ef8.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      password: \"\",\n      confirmation: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRegisterInput = this.handleRegisterInput.bind(this);\n  }\n\n  handleChange(evt) {\n    const value = evt.target.value;\n    this.setState({\n      [evt.target.name]: value\n    });\n    console.log(this.state);\n  }\n\n  handleRegisterInput(event) {\n    axios\n      .post(\"/register\", {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        password: this.state.password\n      })\n      .then(function(response) {\n        console.log(response);\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleRegisterInput}>\n        <label>\n          firstname:\n          <input\n            type=\"text\"\n            name=\"firstname\"\n            value={this.state.firstname}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          lastname:\n          <input\n            type=\"text\"\n            name=\"lastname\"\n            value={this.state.lastname}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          email:\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={this.state.email}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          password :\n          <input\n            type=\"text\"\n            name=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          confirmation :\n          <input\n            type=\"text\"\n            name=\"confirmation\"\n            value={this.state.confirmation}\n            onChange={this.handleChange}\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\nexport default Register;\n","import React from \"react\";\nimport axios from \"axios\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRegisterInput = this.handleRegisterInput.bind(this);\n  }\n\n  handleChange(evt) {\n    const value = evt.target.value;\n    this.setState({\n      [evt.target.name]: value\n    });\n    console.log(this.state);\n  }\n\n  handleRegisterInput(event) {\n    axios\n      .post(\n        \"/login\",\n\n        {\n          email: this.state.email,\n          password: this.state.password\n        }\n      )\n      .then(function(response) {\n        console.log(response);\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleRegisterInput}>\n        <label>\n          email:\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={this.state.email}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          password:\n          <input\n            type=\"text\"\n            name=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <input type=\"submit\" value=\"Login\" />\n      </form>\n    );\n  }\n}\nexport default Login;\n","import React from \"react\";\nimport axios from \"axios\";\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogged: false\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(evt) {\n    var self = this;\n    axios\n      .get(\"/db\", {\n        withCredentials: true,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(function(response) {\n        // handle success\n        console.log(this);\n        self.setState({ isLogged: true });\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n  }\n\n  render() {\n    let divToAppear = <div>not logged in</div>;\n    if (this.state.isLogged) divToAppear = <div>IS NOW LOGGED IN!</div>;\n    return (\n      <div>\n        press this button to call test db!\n        <button onClick={this.handleChange}>press me</button>\n        {divToAppear}\n      </div>\n    );\n  }\n}\nexport default Register;\n","import React from \"react\";\nimport Register from \"./components/Register\";\nimport Login from \"./components/Login\";\nimport TestSession from \"./components/TestSession\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      bonjour hi!\n      <Register />\n      <Login />\n      <TestSession />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}