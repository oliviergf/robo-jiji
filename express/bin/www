#!/usr/bin/env node
const cluster = require("cluster");
const os = require("os");
const cpuCount = os.cpus().length;
require("dotenv").config();
const fs = require("fs");
const publicVapidKey = process.env.PUBLIC_VAPID_KEY;
const privateVapidKey = process.env.PRIVATE_VAPID_KEY;

/**
 * Module dependencies.
 */
if (cluster.isMaster) {
  for (let i = 0; i < cpuCount; i++) {
    cluster.fork();
    // console.log("date here now", new Date().toString());
  }
} else {
  var app = require("../app");
  var debug = require("debug")("express:server");
  var https = require("https");
  let RSSPoolWorkers = require("../services/rss/index");
  const webpush = require("web-push");

  /**
   * sets web-push
   */
  webpush.setVapidDetails(
    "mailto:olivier.gauthier.farley@hotmail.com",
    publicVapidKey,
    privateVapidKey
  );
  /**
   * set crawler workload for each cluster.
   */

  RSSPoolWorkers(cluster.worker.id, cpuCount);

  /**
   * Get port from environment and store in Express.
   */
  var port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);
  console.log(`serving our sweet app on port ${port}`);

  /**
   * Create HTTP server.
   */
  var server = http.createServer(app);

  // var server = https.createServer(
  //   {
  //     key: fs.readFileSync("server.key"),
  //     cert: fs.readFileSync("server.cert"),
  //   },
  //   app
  // );

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
  }
}

cluster.on("exit", (worker) => {
  console.log("mayday! mayday! worker", worker.id, " is no more!");
  cluster.fork();
});
